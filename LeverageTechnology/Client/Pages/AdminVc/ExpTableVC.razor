@page "/ET"
@using LeverageTechnology.Client.Utility;
@using LeverageTechnology.Shared;
@using LeverageTechnology.Shared.Models.DTOs;

@inject ApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<MudGrid Class="pa-2" Style="object-fit: fill;">
    <MudItem Class="mt-1" xs="12" Style="height: fit-content;">
        <MudDataGrid Class="pt-3 pa-4" FixedHeader="true" T="ExpTable" Items="@ExpTables" EditMode="DataGridEditMode.Form"
                     Bordered="true" Dense="true" SelectedItemsChanged="@SelectedItemsChanged">

            <ToolBarContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">Sub Tables</MudText>
                <MudSpacer />
                <MudSpacer />
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Disabled OnClick="CreateNewExpTable" />
            </ToolBarContent>

            <Columns>
                <SelectColumn T="ExpTable" />
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.Page" Title="Page" />
                <PropertyColumn Property="x => x.Introduction" Title="Introduction" />
                <PropertyColumn Property="x => x.Video" Title="Video" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Info" OnClick="InfoItem" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="StartedEditingItem" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Disabled OnClick="DeleteItem" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ExpTable" RowsPerPageString="10" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
</MudGrid>

@code {
    public List<ExpTable> ExpTables { get; set; }
    public ExpTable SelectedExpTable { get; set; }
    public ExpTable ExpTable { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            ExpTables = ApiService.ExpTables;
        }
        else
        {
            NavManager.NavigateTo("/");
        }

    }


    #region Events

    void SelectedItemsChanged(HashSet<ExpTable> items)
    {
        var selectedItem = items.FirstOrDefault();
        if (selectedItem != null)
        {
            SelectedExpTable = selectedItem;
        }
    }

    async void StartedEditingItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsExpTable", true);
        parameters.Add("NewExpTable", SelectedExpTable);
        var dialog = await Dialog.ShowAsync<CaseStudySVC>("Edit CaseStudy", parameters, DialogSettings.DialogOptionsAddEditLead);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // create request object
            var request = await ApiService.EditExTable(SelectedExpTable);
            if (request)
            {
                ExpTables = await ApiService.GetExpTables();
                ShowColorAlerts("ExpTable Added", Severity.Success);
                StateHasChanged();
            }
            else
            {
                ShowColorAlerts("Fail To Add", Severity.Error);
            }
        }
        else
        {
            ShowColorAlerts("ExpTable Not Added", Severity.Info);
        }
    }

    async void InfoItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsExpTable", true);
        parameters.Add("IsInfo", true);
        parameters.Add("NewExpTable", SelectedExpTable);
        var dialog = await Dialog.ShowAsync<CaseStudySVC>("ExpTable", parameters, DialogSettings.DialogOptionsAddEditLead);
        var result = await dialog.Result;
    }

    async void DeleteItem()
    {
        DataIdDTO dataIdDto = new DataIdDTO();
        dataIdDto.Id = SelectedExpTable.Id;

        // create request object
        var request = await ApiService.DeleteExTable(dataIdDto);
        if (request)
        {
            ExpTables = await ApiService.GetExpTables();
            ShowColorAlerts("ExpTable Deleted", Severity.Success);
            StateHasChanged();
        }
        else
        {
            ShowColorAlerts("Fail To Delete", Severity.Error);
        }
    }

    async void CreateNewExpTable()
    {
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="TextToDisplay"></param>
    /// <param name="AlertSeverity"></param>
    private void ShowColorAlerts(string TextToDisplay, Severity AlertSeverity)
    {
        SnackbarService.Clear();
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        SnackbarService.Add(TextToDisplay, AlertSeverity);
    }


    #endregion Events

}

