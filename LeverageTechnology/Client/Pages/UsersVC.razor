@using System.Text.Json;
@using System.Text;
@using LeverageTechnology.Client.Pages.StdVC;
@using LeverageTechnology.Client.Utility;
@using LeverageTechnology.Shared;
@using LeverageTechnology.Shared.Models

@inject ApiService ApiService


<MudGrid Class="pa-2" Style="object-fit: fill;">
    <MudItem Class="mt-1" xs="12" Style="height: fit-content;">
        <MudDataGrid Class="pt-3 pa-4" FixedHeader="true" T="AppUser" Items="@AppUsers" EditMode="DataGridEditMode.Form"
                     Bordered="true" Dense="true" SelectedItemsChanged="@SelectedItemsChanged">

            <ToolBarContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">Users</MudText>
                <MudSpacer />
                <MudSpacer />
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="CreateNewAppUser" />
            </ToolBarContent>

            <Columns>
                <SelectColumn T="AppUser" />
                <PropertyColumn Property="x => AppUsers.IndexOf(x)+1" Title="Nr" />
                <PropertyColumn Property="x => x.FirstName" Title="FirstName" />
                <PropertyColumn Property="x => x.LastName" Title="LastName" />
                <PropertyColumn Property="x => x.UserName" Title="UserName" />
                <PropertyColumn Property="x => x.PasswordHash" Title="Password" />
                <PropertyColumn Property="x => x.IsAdmin" Title="IsAdmin" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Info" OnClick="InfoItem" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"  OnClick="StartedEditingItem" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="DeleteItem" />
                          <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.LockOpen" OnClick="ResetPassword" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="AppUser" RowsPerPageString="10" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
</MudGrid>




@code {


    #region Variables

    public List<AppUser> AppUsers { get; set; }
    public List<AppRole> AppRoles { get; set; }
    public AppUser SelectedAppUser { get; set; }
    public RegisterDto NewUser { get; set; }

    #endregion Variables

    protected override async Task OnInitializedAsync()
    {
        AppUsers = await ApiService.GetUsers();
        AppRoles = await ApiService.GetRoles();

    }


    #region Events

    void SelectedItemsChanged(HashSet<AppUser> items)
    {
        var selectedItem = items.FirstOrDefault();
        if (selectedItem != null)
        {
            SelectedAppUser = selectedItem;
        }
    }

    async void StartedEditingItem()
    {        
        var parameters = new DialogParameters();
        parameters.Add("IsUsers", true);
        parameters.Add("IsInfo", true); 
        NewUser = new RegisterDto();
        NewUser.FirstName = SelectedAppUser.FirstName;
        NewUser.LastName = SelectedAppUser.LastName;
        NewUser.Password = SelectedAppUser.PasswordHash;
        NewUser.UserName = SelectedAppUser.UserName; 
        NewUser.IsAdmin = SelectedAppUser.IsAdmin; 
        parameters.Add("NewUser", NewUser);
        parameters.Add("Roles", AppRoles);

        var dialog = await Dialog.ShowAsync<EditComponent>("Edit Role", parameters, DialogSettings.DialogOptionsAddEditLead);
        var result = await dialog.Result; 

        if (result != null && result.Data is RegisterDto updatedUser)
        {
            
            SelectedAppUser.FirstName = updatedUser.FirstName;
            SelectedAppUser.LastName = updatedUser.LastName;
            SelectedAppUser.IsAdmin = updatedUser.IsAdmin;
           
            StateHasChanged();
        }

    }

    async void InfoItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsUsers", true);
        parameters.Add("IsInfo", true);
        NewUser = new RegisterDto();
        NewUser.FirstName = SelectedAppUser.FirstName;
        NewUser.LastName = SelectedAppUser.LastName;
        NewUser.Password = SelectedAppUser.PasswordHash;
        NewUser.UserName = SelectedAppUser.UserName;
        NewUser.IsAdmin = SelectedAppUser.IsAdmin;
        parameters.Add("NewUser", NewUser);
        parameters.Add("Roles", AppRoles);
        var dialog = await Dialog.ShowAsync<AdminDialog>("AppRole", parameters, DialogSettings.DialogOptionsAddEditLead);
        var result = await dialog.Result;
    }



    async void DeleteItem()
    {
        if (SelectedAppUser != null)
        {
            try
            {
                var dto = new RegisterDto();
                dto.FirstName = SelectedAppUser.FirstName;
                dto.LastName = SelectedAppUser.LastName;
                dto.Password = SelectedAppUser.PasswordHash;
                dto.UserName = SelectedAppUser.UserName;
                dto.IsAdmin = SelectedAppUser.IsAdmin;

                bool deleteSuccess = await ApiService.DeleteUser(dto);

                if (deleteSuccess)
                {
                    AppUsers.Remove(SelectedAppUser);
                    ShowColorAlerts("User deleted successfully.", Severity.Success);
                    StateHasChanged();

                }
                else
                {
                    ShowColorAlerts("Failed to delete user.", Severity.Error);

                }

            }
            catch (Exception ex)
            {
                ShowColorAlerts($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            ShowColorAlerts("No user selected for deletion.", Severity.Warning);
        }
    }




    async void ResetPassword()
    {
        if (SelectedAppUser != null)
        {
            
                var resetPasswordDto = new RegisterDto();
                resetPasswordDto.FirstName = SelectedAppUser.FirstName;
                resetPasswordDto.LastName = SelectedAppUser.LastName;
                resetPasswordDto.Password = SelectedAppUser.PasswordHash;
                resetPasswordDto.UserName = SelectedAppUser.UserName;
                resetPasswordDto.IsAdmin = SelectedAppUser.IsAdmin;


                bool resetSuccess = await ApiService.ResetPassword(resetPasswordDto);

                if (resetSuccess)
                {

                    ShowColorAlerts("Password reset successful.", Severity.Success);
                }
                else
                {
                    ShowColorAlerts("Failed to reset password.", Severity.Error);
                }
            
          
        }
        else
        {
            ShowColorAlerts("No user selected for password reset.", Severity.Warning);
        }
    }


    async void CreateNewAppUser()
    {
        NewUser = new RegisterDto();
        var parameters = new DialogParameters();
        parameters.Add("IsUsers", true);
        parameters.Add("NewUser", NewUser);
        parameters.Add("Roles", AppRoles);
        var dialog = await Dialog.ShowAsync<AdminDialog>("Add User", parameters, DialogSettings.DialogOptionsAddEditLead);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // create request object
            var request = await ApiService.Register(NewUser);
            if (request.Succeeded)
            {
                AppUsers = await ApiService.GetUsers();
                ShowColorAlerts("AppUser Added", Severity.Success);
                StateHasChanged();
            }
            else
            {
                ShowColorAlerts("Fail To Add", Severity.Error);
            }
        }
        else
        {
            ShowColorAlerts("AppUser Not Added", Severity.Info);
        }

    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="TextToDisplay"></param>
    /// <param name="AlertSeverity"></param>
    private void ShowColorAlerts(string TextToDisplay, Severity AlertSeverity)
    {
        SnackbarService.Clear();
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        SnackbarService.Add(TextToDisplay, AlertSeverity);
    }


    #endregion Events




}
